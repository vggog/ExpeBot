import cv2

from src.models import Users
from src.admin.repository import AdminRepository


def get_yes_or_no(message: str) -> str:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –î–∞ –∏–ª–∏ –ù–µ—Ç.
    :param message: –°—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ <—á—Ç–æ—Ç–æ_yes> –∏–ª–∏ <—á—Ç–æ—Ç–æ_no>
    :return: —Å—Ç—Ä–æ–∫—É "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
    """
    answer = message.split("_")[-1]

    return "–î–∞" if answer == "yes" else "–ù–µ—Ç"


def get_message_of_user_info(user: Users) -> str:
    """
    –°—Ç—Ä–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–∞—è –≤ —á–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    :param user: –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
        –æ—Ç–∫—É–¥–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """
    repo = AdminRepository()
    try:
        ref_url_name = repo.get_ref_url_name(user.ref_url)
    except AttributeError:
        ref_url_name = "–ó–∞—à—ë–ª –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."
    message = (
        '<b>–ó–ê–Ø–í–ö–ê –û–¢ </b>‚û°Ô∏è <a href="{user_url}">{user_name}</a>\n'
        'username - @{username}\n'
        '—Å—Å—ã–ª–∫–∞ - {user_url2}'
        '\n'
        'üóø<b>–•—Ç–æ‚Üì</b>\n'
        '–û—Ç–≤–µ—Ç: {answer_first_question}\n'
        '\n'
        'ü§ë <b>–°–∫–æ–ª—å–∫–æ —Ö–∞—Å–ª–∏—Ç –±–∞–±–æ–∫ ‚Üì</b>\n'
        '–û—Ç–≤–µ—Ç: {answer_second_question}\n'
        '\n'
        'üì∏ <b>–ö–∞–º–µ—Ä—É –≤—Ä—É–±–∏—Ç ‚Üì</b>\n'
        '–û—Ç–≤–µ—Ç: {answer_third_question}\n'
        '\n'
        'ü§™ <b>–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å, —á—Ç–æ–±—ã —É–ª–µ—Ç–µ—Ç—å ‚Üì</b>\n'
        '–û—Ç–≤–µ—Ç: {answer_fourth_question}\n'
        '\n'
        '–õ–∏–¥ –ø—Ä–∏—à—ë–ª –æ—Ç - {ref_url_name}\n'
    ).format(
        user_url=user.user_url,
        user_name=user.name,
        username=user.username,
        user_url2=user.user_url,
        answer_first_question=user.answer_first_question,
        answer_second_question=user.answer_second_question,
        answer_third_question=user.answer_third_question,
        answer_fourth_question=user.answer_fourth_question,
        ref_url_name=ref_url_name
    )

    return message


def get_width_height_of_the_video(vidio_path: str) -> dict:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–µ–æ.
    :param vidio_path: –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ —É–∑–Ω–∞—Ç—å –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É.
    :return: dict{
        "height": float,
        "width": float
    }
    """
    file_path = vidio_path
    vid = cv2.VideoCapture(file_path)
    return {
        'height': vid.get(cv2.CAP_PROP_FRAME_HEIGHT),
        'width': vid.get(cv2.CAP_PROP_FRAME_WIDTH)
    }


def pars_raw_url_buttons(raw_url_buttons: str) -> list[list[str, str]]:
    """
    –ú–µ—Ç–æ–¥, –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏.
    —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ
        <–∫–Ω–æ–ø–∫–∞> - <—Å—Å—ã–ª–∫–∞>
        <–∫–Ω–æ–ø–∫–∞> - <—Å—Å—ã–ª–∫–∞>
        ...
    :param raw_url_buttons: —Ç–µ–∫—Å—Ç, —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –≤–∏–¥–∞ <–∫–Ω–æ–ø–∫–∞ - —Å—Å—ã–ª–∫–∞>
    :return: list[list[<–∫–Ω–æ–ø–∫–∞>, <—Å—Å—ã–ª–∫–∞>]]
    """
    return list(
        map(
            lambda s: s.split(" - "), raw_url_buttons.split("\n")
        )
    )
