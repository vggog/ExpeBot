import asyncio

from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, FSInputFile
)

from src.buttons import (
    one_inline_button, average_income_buttons, yes_no_buttons,
    what_are_you_doing_button, no_step10_buttons
)
from src.utils import (
    get_yes_or_no, get_message_of_user_info, get_width_height_of_the_video
)
from src.core.repository import Repository
from src.models import Users, UserPassability
from src.core.settings import Settings, FilesPath


main_routers = Router()


@main_routers.message(Command("get_chat_id"))
async def set_chat_id(message: Message) -> None:
    if message.from_user.id == 645807089:
        await message.answer(f"id —á–∞—Ç–∞: \n{message.chat.id}")


@main_routers.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    try:
        ref_url = Settings.bot_link + "?start=" + message.text.split(" ")[1]
    except IndexError:
        ref_url = Settings.bot_link + "?start"

    repo = Repository()
    if not repo.get_user(message.from_user.id):
        if message.from_user.username:
            user_username = message.from_user.username
        else:
            user_username = "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"

        user = Users(
            id=message.from_user.id,
            name=message.from_user.first_name,
            username=user_username,
            user_url=message.from_user.url,
            ref_url=ref_url
        )
        user_passability = UserPassability(
            user_id=message.from_user.id,
            ref_url=ref_url
        )

        repo.create_user(user, user_passability)

    await message.answer(
        "–¢—ã —Ç—É—Ç 105% –Ω–µ —Å–ª—É—á–∞–π–Ω–æüëå\n\n–£ –º–µ–Ω—è –µ—Å—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–æ–≤–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å",
        reply_markup=one_inline_button(
            text="–ß—Ç–æ –∑–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å?",
            callback_data="step2",
        )
    )


@main_routers.callback_query(F.data == "step2")
async def step2(callback: CallbackQuery) -> None:
    await callback.answer()

    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step2=True,
    )

    files_id = repo.get_files_ids()

    # photo1 = FSInputFile("static/step2_1.jpg")
    await callback.message.answer_photo(photo=files_id.step2_1)
    await asyncio.sleep(2)
    # photo2 = FSInputFile("static/step2_2.jpg")
    await callback.message.answer_photo(photo=files_id.step2_2)
    await asyncio.sleep(2)
    # photo3 = FSInputFile("static/step2_3.jpg")
    await callback.message.answer_photo(photo=files_id.step2_3)
    await asyncio.sleep(2)

    await callback.message.answer(
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ?",
        reply_markup=one_inline_button(
            text="–î–∞",
            callback_data="step3"
        )
    )


@main_routers.callback_query(F.data == "step3")
async def step3(callback: CallbackQuery) -> None:
    """
    """
    await callback.answer()

    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step3=True,
    )

    files_id = repo.get_files_ids()

    await callback.message.answer_sticker(
        "CAACAgIAAxkBAAECbm9lefsxoXG7sERvlchn"
        "7zBvRProOgACN0UAAjskqUsGhzxzCywwGjME"
    )
    await asyncio.sleep(1)

    await callback.message.answer_sticker(
        "CAACAgIAAxkBAAECbndleftRH5ByQLxKpnk8"
        "ktKbw27ArwACQUcAAnnmqUs_jcmhPWt1PzME"
    )
    await asyncio.sleep(1)

    await callback.message.answer_sticker(
        "CAACAgIAAxkBAAECbnlleftbMM-d0yZfb3Dn"
        "_5wn-pGEMQACBEMAAu6DqEtSK_1m1477czME"
    )
    await asyncio.sleep(1)

    await callback.message.answer_sticker(
        "CAACAgIAAxkBAAEBOgRlFHTvvm6TQs_kbpOJ"
        "lkpYIAzdlgACtzYAAjJ50UtuaZMXZQNWeTAE"
    )
    await asyncio.sleep(1)

    # photo1 = FSInputFile("static/step3_1.jpg")
    await callback.message.answer_photo(
        photo=files_id.step3_1,
        caption=(
            '<a href="https://t.me/nikola_disney/292">–°–º–æ—Ç—Ä–µ—Ç—å</a>'
        ),
        parse_mode="HTML",
    )
    # photo2 = FSInputFile("static/step3_2.jpg")
    await callback.message.answer_photo(
        photo=files_id.step3_2,
        caption=(
            '<a href="https://t.me/nikola_disney/325">–°–º–æ—Ç—Ä–µ—Ç—å</a>'
        ),
        parse_mode="HTML",
    )
    # photo3 = FSInputFile("static/step3_3.jpg")
    await callback.message.answer_photo(
        photo=files_id.step3_3,
        caption=(
            '<a href="https://t.me/nikola_disney/296">–°–º–æ—Ç—Ä–µ—Ç—å</a>'
        ),
        parse_mode="HTML",
    )

    await asyncio.sleep(2)

    await callback.message.answer(
        "–î–∞, —Ç—É—Ç –≤—Å—ë —Ä–µ–∞–ª—å–Ω–æ! –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–∏—à—å –∫–µ–π—Å—ã\n"
        "–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üëáüèª",
        reply_markup=one_inline_button(
            text="–•–æ—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
            callback_data="step4",
        )
    )


@main_routers.callback_query(F.data == "step4")
async def step4(callback: CallbackQuery) -> None:
    await callback.answer()
    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step4=True,
    )
    files_id = repo.get_files_ids()

    await callback.message.answer("‚Ä¶—Å–µ–π—á–∞—Å —è –≤–∞—Å –ø–æ–∑–Ω–∞–∫–æ–º–ª—é =)")
    await asyncio.sleep(2)

    vidio_size = get_width_height_of_the_video(FilesPath.step5_vid)

    await callback.message.answer_video(
        video=files_id.step5_vid,
        width=vidio_size["width"],
        height=vidio_size["height"],
        # thumbnail=FSInputFile("static/step5_vid_prev.JPEG"),
        caption=
        "–ù–∏–∫–æ–ª–∞ –î–∏—Å–Ω–µ–π \n"
        "\n"
        "<b>–°–æ–∑–¥–∞—Ç–µ–ª—å</b> –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å–∫–æ–≤ –∏ "
        "–ø—Ä–æ–¥–∞–∂ –Ω–∞ –≤—ã—Å–æ–∫–∏–π —á–µ–∫ - <b>EXPE</b>\n"
        "\n"
        "- —Å–¥–µ–ª–∞–ª –Ω–∞ –æ—Ö–≤–∞—Ç–∞—Ö 70 —á–µ–ª–æ–≤–µ–∫ - <b>8,5 –º–ª–Ω ‚ÇΩ –∑–∞ 3 –º–µ—Å—è—Ü–∞</b>, "
        "–±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ EXPE\n"
        "\n"
        "- –æ–±—É—á–∏–ª 50+ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ –µ–≥–æ –º–æ–¥–µ–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <b>1-3 –º–ª–Ω ‚ÇΩ "
        "–∑–∞ 3 –Ω–µ–¥–µ–ª–∏</b>\n"
        "\n"
        "<b>- –≤—ã—Ä–∞–±–æ—Ç–∞–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–ø—É—Å–∫–∞ –æ—Ç 1 –º–ª–Ω ‚ÇΩ –∑–∞ 3 –Ω–µ–¥–µ–ª–∏</b>"
        " (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π –≤ —Ç—Ä–∞—Ñ–∏–∫ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥)"
    )

    await asyncio.sleep(4)
    await callback.message.answer(
        "–î–∞–≤–∞–π —è —Ç–µ–±–µ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Ç–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç?",
        reply_markup=one_inline_button(
            text="–î–∞–≤–∞–π üöÄ",
            callback_data="step5",
        )
    )


@main_routers.callback_query(F.data == "step5")
async def step5(callback: CallbackQuery) -> None:
    await callback.answer()

    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step5=True,
    )

    await callback.message.answer(
        "–û–π üòÖ –¥–∞ —è –æ —Ç–µ–±–µ –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é,\n"
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ\n"
        "\n"
        "–¢—ã‚Ä¶",
        reply_markup=what_are_you_doing_button(),
    )


@main_routers.callback_query(F.data.startswith("step6"))
async def step6(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()

    actions = {
        '1': '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
        '2': '–ü—Ä–æ–¥—é—Å–µ—Ä',
        '3': '–≠–∫—Å–ø–µ—Ä—Ç',
        '4': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
        '5': '–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
        '6': '–ë–ª–æ–≥–µ—Ä',
        '7': '–†–∞–±–æ—Ç–∞ –≤ –Ω–∞–π–º–µ',
        '8': '–î—Ä—É–≥–æ–µ',
        '9': '–ò–Ω—Ñ–æ–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
    }
    action = callback.data.split("_")[1]
    answer = actions[action]
    repo.update_user(
        callback.from_user.id,
        answer_first_question=answer
    )

    await callback.message.answer(
        "<b>–ö–∞–∫–æ–π —Ç–≤–æ–π —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü?</b>",
        reply_markup=average_income_buttons(),
    )
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step6=True,
    )


@main_routers.callback_query(F.data.startswith("step7"))
async def step7(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete()

    repo = Repository()

    repo.update_user_passability(
        user_id=callback.from_user.id,
        step7=True,
    )

    action = callback.data.split("_")[1]
    if action == "1":
        answer = "–î–æ 100 —Ç—ã—Å—è—á (1000$)"
    elif action == "2":
        answer = "–û—Ç 100 –¥–æ 300 —Ç—ã—Å—è—á (3000$)"
    elif action == "3":
        answer = "–û—Ç 300 –¥–æ 600 —Ç—ã—Å—è—á (6000$)"
    elif action == "4":
        answer = "–û—Ç 600 –¥–æ 1 –º–ª–Ω (10000$)"
    else:
        answer = "–ë–æ–ª—å—à–µ 1 –º–ª–Ω (10.000$+)"

    repo.update_user(
        callback.from_user.id,
        answer_second_question=answer
    )

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ üî•")
    await asyncio.sleep(1)

    await callback.message.answer(
        "–¢–∞–∫—Å.. –í–æ—Ç —Ç–µ —Å–∞–º—ã–µ 3 —à–∞–≥–∞ ‚Üì"
    )
    # await asyncio.sleep(3)

    # photo1 = FSInputFile("static/step7_1.jpg")
    files_id = repo.get_files_ids()
    await callback.message.answer_photo(
        photo=files_id.step7_1,
        caption=
        '–í—ã <b>—Ç–µ—Ä–ø–∏—Ç–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ</b> –µ—â—ë –¥–æ —Ç–æ–≥–æ, '
        '–∫–∞–∫ —Ä–µ—à–∏–ª–∏ <b>—Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É</b>!\n'
        '\n'
        '<span class="tg-spoiler">'
        '–ï—Å–ª–∏ –≤—ã –¥–µ–ª–∞–µ—Ç–µ —ç—Ç–æ <b>–ë–ï–ó</b> –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ '
        '</span>',
        parse_mode="HTML"
    )
    await asyncio.sleep(2)

    # await callback.message.answer("–í—Ç–æ—Ä–æ–π —à–∞–≥ ‚Üì")
    # await asyncio.sleep(1)

    vidio_size = get_width_height_of_the_video(FilesPath.step7_2_vid)
    # video2 = FSInputFile("static/step7_2_vid.mp4")

    await callback.message.answer_video(
        video=files_id.step7_2_vid,
        width=vidio_size["width"],
        height=vidio_size["height"],
        caption=
        '<span class="tg-spoiler">'
        '–§–æ—Ä–º–∏—Ä—É–µ–º <b>—É–±–æ–π–Ω—ã–π</b> –æ—Ñ—Ñ–µ—Ä –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–∏–¥–æ-—Å–∏—Å—Ç–µ–º—É —Ç–∞–∫, '
        '—á—Ç–æ–±—ã <b>–∑–∞—è–≤–∫–∏ —à–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å</b>'
        '</span>',
        parse_mode="HTML"
    )
    await asyncio.sleep(2)

    # await callback.message.answer("–¢—Ä–µ—Ç–∏–π —à–∞–≥ ‚Üì")
    # await asyncio.sleep(1)
    # photo3 = FSInputFile("static/step7_3.jpg")
    await callback.message.answer_photo(
        photo=files_id.step7_3,
        caption=
        '<span class="tg-spoiler">'
        '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –º–æ–∂–µ—Ç –∫–∞–∂–¥—ã–π, '
        '–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏–∑ —Ä–∞–∑–∞ –≤ —Ä–∞–∑? –ï–¥–∏–Ω–∏—Ü—ã=)'
        '</span>',
        parse_mode="HTML"
    )
    await asyncio.sleep(2)

    await callback.message.answer(
        "<b>–ü—Ä–∏–≥–ª–∞—à–∞—é —Ç–µ–±—è –≤ –≥–æ—Å—Ç–∏</b> ü•≥\n"
        "–î–∞–≤–∞–π –ø–æ –ø–æ–ª–æ—á–∫–∞–º —Ä–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ —Ç—ã —É–∑–Ω–∞–µ—à—å, "
        "–∫–∞–∫ –º—ã –ø–æ—Å—Ç—Ä–æ–∏–º —Ç–µ–±–µ —Ç—Ä–∞—Ñ–∏–∫-—Å–∏—Å—Ç–µ–º—É —Ç–∞–∫, "
        "—á—Ç–æ–±—ã –∑–∞—è–≤–∫–∏ –±—ã–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        reply_markup=one_inline_button(
            text="–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ‚úÖ",
            callback_data="step8",
        )
    )


@main_routers.callback_query(F.data == "step8")
async def step8(callback: CallbackQuery) -> None:
    await callback.answer()
    repo = Repository()

    repo.update_user_passability(
        user_id=callback.from_user.id,
        step8=True,
    )

    await callback.message.answer(
        '–û—Ç–ª–∏—á–Ω–æ, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! üôåüèΩ\n'
        '\n'
        '–Ø –∑–∞–ø–∏—à—É —Ç–µ–±—è –Ω–∞ –≤–∏–¥–µ–æ–≤—Å—Ç—Ä–µ—á—É\n'
        '\n'
        '*–ì–æ—Ç–æ–≤(–∞) –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É, —á—Ç–æ–±—ã —Å–æ–∑–≤–æ–Ω–∏—Ç—å—Å—è?*',
        parse_mode="Markdown",
        reply_markup=yes_no_buttons(
            "step9"
        ),
    )


@main_routers.callback_query(F.data.startswith("step9"))
async def step9(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()
    repo.update_user(
        callback.from_user.id,
        answer_third_question=get_yes_or_no(callback.data),
    )
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step9=True,
    )

    if callback.data == "step9_yes":
        await callback.message.answer(
            '*–ì–æ—Ç–æ–≤(–∞) –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–≤—è–∑–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ù–∏–∫–æ–ª—ã, '
            '—á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å?*',
            parse_mode="Markdown",
            reply_markup=yes_no_buttons(
                "step10"
            ),
        )
    else:
        video_path = 'static/step12.mp4'
        vidio_size = get_width_height_of_the_video(video_path)
        vidio = FSInputFile(video_path)
        await callback.message.answer_video(
            video=vidio,
            width=vidio_size["width"],
            height=vidio_size["height"],
            caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—á—Ç–∏ –ø—Ä–æ—Å—Ä*–Ω–∞ üò•",
        )
        await asyncio.sleep(4)
        await callback.message.answer(
            "–ì–æ—Ç–æ–≤(–∞) –ø—Ä–∏–º–µ–Ω—è—Ç—å —Å–≤—è–∑–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ù–∏–∫–æ–ª—ã, "
            "—á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å?",
            reply_markup=yes_no_buttons(
                "answer_no_step10"
            )
        )


@main_routers.callback_query(F.data.startswith("step10"))
async def step10(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()
    repo.update_user(
        callback.from_user.id,
        answer_fourth_question=get_yes_or_no(callback.data),
    )
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step10=True,
    )

    user = repo.get_user(callback.from_user.id)
    if user:
        await callback.bot.send_message(
            Settings.chat_id,
            get_message_of_user_info(user)
        )

    repo = Repository()
    repo.update_user(
        callback.from_user.id,
        went_to_the_end=True,
    )

    if callback.data == "step10_yes":
        await callback.message.answer(
            "<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n" 
            "–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è ü•≥</b>\n"
            "\n"
            "–ê –ø–æ–∫–∞ —á—Ç–æ –¥–µ—Ä–∂–∏:\n"
            "\n"
            "<a "
            "href=\"https://teletype.in/@nikola_disney/klient_za_3_million\""
            ">üéÅ –ö–ê–ö –ü–†–ò–í–õ–ï–ß–¨ –ö–õ–ò–ï–ù–¢–ê –ù–ê –ß–ï–ö 1-3 –º–ª–Ω ‚ÇΩ"
            "</a>",
            parse_mode="html",
            disable_web_page_preview=True,
            reply_markup=one_inline_button(
                "–•–æ—á—É –µ—â—ë",
                "step11"
            )
        )
    else:
        video_path = 'static/step12.mp4'
        vidio_size = get_width_height_of_the_video(video_path)
        vidio = FSInputFile(video_path)
        await callback.message.answer_video(
            video=vidio,
            width=vidio_size["width"],
            height=vidio_size["height"],
            caption="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í–∞—à–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å—Ä*–Ω–∞ üò•",
        )
        await asyncio.sleep(4)

        await callback.message.answer(
            "–£ —Ç–µ–±—è –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å "
            "*–±–µ—Å–ø–ª–∞—Ç–Ω–æ* "
            "—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é —É –ù–∏–∫–æ–ª—ã\n"
            "–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è =)",
            parse_mode="markdown",
            reply_markup=no_step10_buttons(),
        )


@main_routers.callback_query(F.data == "step11")
async def step11(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer(
        "–°—É–ø–µ—Ä, –¥–µ—Ä–∂–∏\n"
        "\n"
        "<a href=\"https://teletype.in/@nikola_disney/1100000za3dnya\">"
        "üéÅ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å 1.100.000‚ÇΩ –Ω–∞ —Ç—Ä—ë—Ö–¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ–≥—Ä–µ–≤–µ</a>",
        parse_mode="html",
        disable_web_page_preview=True,
        reply_markup=one_inline_button(
            "–•–æ—á—É –µ—â—ë",
            "step11_1"
        )
    )

    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step11=True,
    )


@main_routers.callback_query(F.data == "step11_1")
async def step11_1(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()
    files_id = repo.get_files_ids()

    # file = FSInputFile("static/50 –ª–∏–¥–æ–≤ –∑–∞ 5 –º–∏–Ω –≤ –¢–ì.pdf")
    await callback.message.answer("–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º üòâ \n–¥–µ—Ä–∂–∏")
    await callback.message.answer_document(
        files_id.bonus1,
        reply_markup=one_inline_button(
            "–ê —è —Ö–æ—á—É –µ—â—ë üòÉ",
            "step11_2"
        )
    )


@main_routers.callback_query(F.data == "step11_2")
async def step11_2(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()
    files_id = repo.get_files_ids()

    # file = FSInputFile("static/–ò–¥–µ–∞–ª—å–Ω—ã–∏ÃÜ –ª–∏–¥–º–∞–≥–Ω–∏—Ç.pdf")
    await callback.message.answer("–•–æ—Ä–æ—à–æ üëåüèº –∑–∞–±–∏—Ä–∞–π –µ—â—ë =)")
    await callback.message.answer_document(
        files_id.bonus2,
        reply_markup=one_inline_button(
            "–ê –º–æ–∂–Ω–æ –µ—â—ë?",
            "step11_3"
        )
    )


@main_routers.callback_query(F.data == "step11_3")
async def step11_3(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    repo = Repository()
    files_id = repo.get_files_ids()

    # file = FSInputFile("static/11_—Å–ø–æ—Å–æ–±–æ–≤_—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è_–≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ_–æ—Ñ—Ñ–µ—Ä–∞.pdf")
    await callback.message.answer("–î–∞ –º–æ–∂–Ω–æ –µ—â—ë =) –¥–µ—Ä–∂–∏")
    await callback.message.answer_document(
        files_id.bonus3,
        reply_markup=one_inline_button(
            "–ò –µ—â—ë –æ–¥–∏–Ω —Ä–∞–∑–æ–∫ ‚òùüèΩ –ª–∞–¥–Ω–æ? üòÖ",
            "step11_4"
        )
    )


@main_routers.callback_query(F.data == "step11_4")
async def step11_3(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer(
        "–ê ¬´–µ—â—ë —Ä–∞–∑–æ–∫¬ª —Ç—ã –ø–æ–ª—É—á–∏—à—å –ª–∏—á–Ω–æ —É –ù–∏–∫–æ–ª—ã\n"
        "\n"
        "‚Ä¶–µ—Å–ª–∏ –æ–Ω —Ç–µ–±—è –æ—Ç–±–µ—Ä–µ—Ç –Ω–∞ —Ä–∞–∑–±–æ—Ä"
    )

    repo = Repository()
    repo.update_user(
        callback.from_user.id,
        pick_up_all_bonus=True,
    )


@main_routers.callback_query(F.data.startswith("answer_no_step10"))
async def step8(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    if callback.data == "answer_no_step10_no":
        photo = FSInputFile("static/step13.jpg")
        await callback.message.answer_photo(
            photo,
            caption="–í–∞—à –ª–∏–º–∏—Ç –¥–æ–≤–µ—Ä–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω!\n"
                    "\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –±–æ–≥–∞—á–µ —É–ø—É—â–µ–Ω–∞\n"
                    "\n"
                    "- –º—ã —Ü–µ–Ω–∏–º –Ω–µ–ª–µ–≥–∫–∏–π —Ç—Ä—É–¥, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Ç–∞–º, "
                    "–≥–¥–µ –æ–Ω –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è! ‚ù§Ô∏è"
        )
        await asyncio.sleep(4)

    await callback.message.answer(
        "–£ —Ç–µ–±—è –±—ã–ª–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å "
        "*–±–µ—Å–ø–ª–∞—Ç–Ω–æ* "
        "—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é —É –ù–∏–∫–æ–ª—ã\n"
        "–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è =)",
        parse_mode="markdown",
        reply_markup=no_step10_buttons(),
    )

    repo = Repository()
    repo.update_user(
        callback.from_user.id,
        answer_fourth_question=get_yes_or_no(callback.data),
        went_to_the_end=True,
    )

    user = repo.get_user(callback.from_user.id)
    if user:
        await callback.bot.send_message(
            Settings.chat_id,
            get_message_of_user_info(user)
        )


@main_routers.callback_query(F.data == "sign_up_strat_session")
async def sign_up_strat_session(callback: CallbackQuery) -> None:
    await callback.answer()

    await callback.message.answer(
        "–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏\n"
        "\n"
        "- 201 USDT\n"
        "\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–∏—à–∏ —Å—é–¥–∞ - @nikoIanext\n" 
        "\n"
        "- –°–µ—Ç—å (TRC20)\n"
        "\n"
        "TBvWrmTvvJCnTWRBaUPZR3eGTQQ4LrAJiu"
    )
    await callback.message.answer(
        "TBvWrmTvvJCnTWRBaUPZR3eGTQQ4LrAJiu"
    )


@main_routers.callback_query(F.data == "pick_up_bonuses")
async def step11(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer(
        "–°—É–ø–µ—Ä, –¥–µ—Ä–∂–∏\n"
        "\n"
        "<a href=\"https://teletype.in/@nikola_disney/1100000za3dnya\">"
        "üéÅ –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å 1.100.000‚ÇΩ –Ω–∞ —Ç—Ä—ë—Ö–¥–Ω–µ–≤–Ω–æ–º –ø—Ä–æ–≥—Ä–µ–≤–µ</a>",
        parse_mode="html",
        disable_web_page_preview=True,
        reply_markup=one_inline_button(
            "–•–æ—á—É –µ—â—ë",
            "pick_up_bonuses_1"
        )
    )

    repo = Repository()
    repo.update_user_passability(
        user_id=callback.from_user.id,
        step11=True,
    )


@main_routers.callback_query(F.data == "pick_up_bonuses_1")
async def pick_up_bonuses_1(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    file = FSInputFile("static/50 –ª–∏–¥–æ–≤ –∑–∞ 5 –º–∏–Ω –≤ –¢–ì.pdf")
    await callback.message.answer("–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º üòâ \n–¥–µ—Ä–∂–∏")
    await callback.message.answer_document(
        file,
        reply_markup=one_inline_button(
            "–ê —è —Ö–æ—á—É –µ—â—ë üòÉ",
            "pick_up_bonuses_2"
        )
    )


@main_routers.callback_query(F.data == "pick_up_bonuses_2")
async def pick_up_bonuses_2(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    file = FSInputFile("static/–ò–¥–µ–∞–ª—å–Ω—ã–∏ÃÜ –ª–∏–¥–º–∞–≥–Ω–∏—Ç.pdf")
    await callback.message.answer("–•–æ—Ä–æ—à–æ üëåüèº –∑–∞–±–∏—Ä–∞–π –µ—â—ë =)")
    await callback.message.answer_document(
        file,
        reply_markup=one_inline_button(
            "–ê –º–æ–∂–Ω–æ –µ—â—ë?",
            "pick_up_bonuses_3"
        )
    )


@main_routers.callback_query(F.data == "pick_up_bonuses_3")
async def pick_up_bonuses_3(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    file = FSInputFile("static/11_—Å–ø–æ—Å–æ–±–æ–≤_—Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è_–≥–µ–Ω–∏–∞–ª—å–Ω–æ–≥–æ_–æ—Ñ—Ñ–µ—Ä–∞.pdf")
    await callback.message.answer("–î–∞ –º–æ–∂–Ω–æ –µ—â—ë =) –¥–µ—Ä–∂–∏")
    await callback.message.answer_document(
        file,
        reply_markup=one_inline_button(
            "–ò –µ—â—ë –æ–¥–∏–Ω —Ä–∞–∑–æ–∫ ‚òùüèΩ –ª–∞–¥–Ω–æ? üòÖ",
            "pick_up_bonuses_4"
        )
    )


@main_routers.callback_query(F.data == "pick_up_bonuses_4")
async def pick_up_bonuses_4(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.delete_reply_markup()

    await callback.message.answer(
        "–ê ¬´–µ—â—ë —Ä–∞–∑–æ–∫¬ª —Ç—ã –ø–æ–ª—É—á–∏—à—å –ª–∏—á–Ω–æ —É –ù–∏–∫–æ–ª—ã =)",
        reply_markup=one_inline_button(
            "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –°—Ç—Ä–∞—Ç.—Å–µ—Å—Å–∏—é",
            "sign_up_strat_session",
        )
    )
